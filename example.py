#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è E-Commerce Log Analysis System

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
–¥–ª—è e-commerce –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import List

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ bot.py
from bot import (
    RealTimeLogAnalyzer, 
    LogEntry, 
    SessionAnalysis,
    LogProcessor,
    IncidentVectorStore,
    EnhancedRAGSystem
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_sample_logs() -> List[LogEntry]:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    base_time = datetime.now()
    
    logs = [
        # –£—Å–ø–µ—à–Ω–∞—è —Å–µ—Å—Å–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
        LogEntry(
            timestamp=base_time,
            session_id="sess_001",
            user_id="user_123",
            event_type="page_view",
            event_data={"page": "/products", "product_id": "prod_456"},
            response_time=0.5
        ),
        LogEntry(
            timestamp=base_time + timedelta(seconds=2),
            session_id="sess_001",
            user_id="user_123",
            event_type="add_to_cart",
            event_data={"product_id": "prod_456", "quantity": 2},
            response_time=0.8
        ),
        
        # –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –æ—à–∏–±–∫–∞–º–∏
        LogEntry(
            timestamp=base_time + timedelta(minutes=1),
            session_id="sess_002",
            user_id="user_789",
            event_type="checkout",
            event_data={"step": "payment", "amount": 150.0},
            error_code="PAYMENT_TIMEOUT",
            response_time=8.5
        ),
        LogEntry(
            timestamp=base_time + timedelta(minutes=1, seconds=10),
            session_id="sess_002",
            user_id="user_789",
            event_type="error",
            event_data={"error": "Payment gateway timeout", "retry_count": 1},
            error_code="API_TIMEOUT",
            response_time=10.2
        ),
        LogEntry(
            timestamp=base_time + timedelta(minutes=1, seconds=20),
            session_id="sess_002",
            user_id="user_789",
            event_type="error",
            event_data={"error": "Database connection failed"},
            error_code="DB_CONNECTION_ERROR",
            response_time=12.1
        ),
        
        # –°–µ—Å—Å–∏—è —Å –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        LogEntry(
            timestamp=base_time + timedelta(minutes=2),
            session_id="sess_003",
            user_id="user_456",
            event_type="search",
            event_data={"query": "laptop", "filters": {"price_range": "500-1000"}},
            response_time=3.2
        ),
        LogEntry(
            timestamp=base_time + timedelta(minutes=2, seconds=5),
            session_id="sess_003",
            user_id="user_456",
            event_type="search",
            event_data={"query": "gaming laptop", "filters": {"brand": "ASUS"}},
            response_time=4.8
        ),
        LogEntry(
            timestamp=base_time + timedelta(minutes=2, seconds=10),
            session_id="sess_003",
            user_id="user_456",
            event_type="search",
            event_data={"query": "gaming laptop", "filters": {"brand": "MSI"}},
            response_time=6.1
        ),
    ]
    
    return logs

async def demonstrate_log_processing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤"""
    logger.info("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ª–æ–≥–æ–≤
    processor = LogProcessor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤
    all_logs = create_sample_logs()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ —Å–µ—Å—Å–∏—è–º
    sessions = {}
    for log in all_logs:
        if log.session_id not in sessions:
            sessions[log.session_id] = []
        sessions[log.session_id].append(log)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
    for session_id, session_logs in sessions.items():
        logger.info(f"\n--- –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏ {session_id} ---")
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
        bottlenecks = processor.detect_bottlenecks(session_logs)
        
        if bottlenecks:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–∑–∫–∏–µ –º–µ—Å—Ç–∞: {bottlenecks}")
        else:
            logger.info("–£–∑–∫–∏—Ö –º–µ—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
        errors = [log for log in session_logs if log.error_code]
        response_times = [log.response_time for log in session_logs if log.response_time]
        
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π: {len(session_logs)}")
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {len(errors)}")
        if response_times:
            avg_response = sum(response_times) / len(response_times)
            logger.info(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response:.2f} —Å–µ–∫")

async def demonstrate_rag_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã (—Ç—Ä–µ–±—É–µ—Ç OpenAI API –∫–ª—é—á)"""
    logger.info("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    try:
        from config import OPENAI_API_KEY
        if not OPENAI_API_KEY or OPENAI_API_KEY == "your-openai-api-key-here":
            logger.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é RAG-—Å–∏—Å—Ç–µ–º—ã.")
            return
    except ImportError:
        logger.warning("–§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ config.py.example")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG-—Å–∏—Å—Ç–µ–º—É
    vector_store = IncidentVectorStore()
    rag_system = EnhancedRAGSystem(OPENAI_API_KEY, vector_store)
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞
    incident_description = """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É –Ω–∞ —Å—É–º–º—É $150, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã 
    –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞—é—Ç—Å—è. 
    –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —à–ª—é–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 8 —Å–µ–∫—É–Ω–¥.
    """
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º embedding –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞...")
        embedding = await rag_system.get_embedding(incident_description)
        logger.info(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: {len(embedding)}")
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
        logger.info("–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...")
        similar_cases = await vector_store.semantic_search(embedding)
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤: {len(similar_cases)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if similar_cases:
            logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
            solution = await rag_system.generate_solution(incident_description, similar_cases)
            logger.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n{solution}")
        else:
            logger.info("–ü–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è...")
            solution = await rag_system._generate_initial_solution(incident_description)
            logger.info(f"–ë–∞–∑–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n{solution}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å RAG-—Å–∏—Å—Ç–µ–º–æ–π: {e}")

async def demonstrate_full_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    logger.info("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞ –¥–ª—è –¥–µ–º–æ)
    analyzer = RealTimeLogAnalyzer(openai_api_key="demo-key")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ª–æ–≥–æ–≤
    all_logs = create_sample_logs()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Å—Å–∏—è–º
    sessions = {}
    for log in all_logs:
        if log.session_id not in sessions:
            sessions[log.session_id] = []
        sessions[log.session_id].append(log)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
    for session_id, session_logs in sessions.items():
        logger.info(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ {session_id} ---")
        
        try:
            result = await analyzer.process_session_logs(session_logs)
            
            if result:
                logger.info("üö® –ò–ù–¶–ò–î–ï–ù–¢ –û–ë–ù–ê–†–£–ñ–ï–ù!")
                logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {result.get('incident_description', 'N/A')}")
                logger.info(f"–£–∑–∫–∏–µ –º–µ—Å—Ç–∞: {result.get('bottlenecks', [])}")
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª—É—á–∞–µ–≤: {result.get('similar_cases_found', 0)}")
            else:
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –±–µ–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    report = analyzer.get_performance_report()
    logger.info("\nüìä –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    logger.info(json.dumps(report, indent=2, ensure_ascii=False))

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ E-Commerce Log Analysis System")
    logger.info("=" * 60)
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤
        await demonstrate_log_processing()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã
        await demonstrate_rag_system()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        await demonstrate_full_analysis()
        
        logger.info("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    asyncio.run(main())
